hydra:
  run:
    dir: experiments/${experiment_name}
  sweep:
    dir: experiments/${experiment_name}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params:
      benchmark.input_shapes.batch_size: 1,2
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(purple)sHYDRA%(reset)s] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(blue)s%(name)s%(reset)s][%(log_color)s%(levelname)s%(reset)s]
          - %(message)s'
        log_colors:
          DEBUG: purple
          INFO: green
          WARNING: yellow
          ERROR: red
          CRITICAL: red
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task: []
  job:
    name: cli
    chdir: true
    override_dirname: ''
    id: ???
    num: ???
    config_name: awq
    env_set:
      CUDA_VISIBLE_DEVICES: '0'
      CUDA_DEVICE_ORDER: PCI_BUS_ID
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/chuan/workspaces/llm-plus/quantization
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: optimum_benchmark
      schema: pkg
      provider: main
    - path: hydra_plugins.hydra_colorlog.conf
      schema: pkg
      provider: hydra-colorlog
    - path: /home/chuan/workspaces/llm-plus/quantization/configs
      schema: file
      provider: command-line
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      launcher: process
      benchmark: inference
      backend: pytorch
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: colorlog
      hydra/hydra_logging: colorlog
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
backend:
  name: pytorch
  version: 2.2.0
  _target_: optimum_benchmark.backends.pytorch.backend.PyTorchBackend
  seed: 42
  model: /home/chuan/models/qwen/Qwen1___5-7B-Chat-AWQ
  device: cuda
  device_ids: null
  task: text-generation
  library: transformers
  inter_op_num_threads: null
  intra_op_num_threads: null
  hub_kwargs: {}
  no_weights: true
  device_map: null
  torch_dtype: float16
  amp_autocast: false
  amp_dtype: null
  eval_mode: true
  to_bettertransformer: false
  low_cpu_mem_usage: null
  attn_implementation: null
  cache_implementation: null
  torch_compile: false
  torch_compile_config: {}
  quantization_scheme: awq
  quantization_config:
    bits: 4
  deepspeed_inference: false
  deepspeed_inference_config: {}
  peft_strategy: null
  peft_config: {}
benchmark:
  name: inference
  _target_: optimum_benchmark.benchmarks.inference.benchmark.InferenceBenchmark
  duration: 10
  warmup_runs: 10
  input_shapes:
    batch_size: 1
    sequence_length: 512
  new_tokens: 1000
  energy: false
  memory: true
  latency: true
  forward_kwargs: {}
  generate_kwargs: {}
  call_kwargs: {}
launcher:
  name: process
  _target_: optimum_benchmark.launchers.process.launcher.ProcessLauncher
  device_isolation: false
  start_method: spawn
experiment_name: awq-batch_size(${benchmark.input_shapes.batch_size})-sequence_length(${benchmark.input_shapes.sequence_length})-new_tokens(${benchmark.new_tokens})
task: null
model: null
device: null
library: null
environment:
  cpu: ' Intel(R) Core(TM) i5-14600K'
  cpu_count: 20
  cpu_ram_mb: 201887
  system: Linux
  python_version: 3.10.13
  transformers_version: 4.37.2
  transformers_commit: null
  accelerate_version: 0.27.2
  accelerate_commit: null
  diffusers_version: null
  diffusers_commit: null
  optimum_version: 1.16.2
  optimum_commit: 7eca653000fae5b4d7c17ea850a060f8990c28af
  timm_version: null
  timm_commit: null
  peft_version: 0.8.2
  peft_commit: null
